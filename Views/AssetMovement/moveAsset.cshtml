@model EMMS.ViewModels.MoveRequestViewModel;
@{
    ViewData["Title"] = "Move Assets";
    ViewData["moveAsset"] = "active";
    ViewData["JobMovement"] = "active";
    Model.MoveAsset!.MovementDate = DateTime.Today;
}

<!-- Modal -->

        <div class="card">
            <div class="card-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Move Asset</h1>
            </div>
            <div class="card-body">

        @if (TempData["MovementError"] != null)
        {
            <div class="row alert alert-danger d-flex align-items-center alert-dismissible fade show" role="alert">
                @TempData["MovementError"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>

        }
             
                <form asp-action="MoveAsset" asp-controller="AssetMovement" method="post">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="MoveAsset.MovementDate" class="form-label required-field"></label>
                            <input asp-for="MoveAsset.MovementDate" class="form-control" type="date" />
                            <span asp-validation-for="MoveAsset.MovementDate" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="MoveAsset.AssetId" class="form-label required-field"></label>
                            <input asp-for="MoveAsset.AssetId" class="form-control" type="Guid" hidden />
                            <input class="form-control" type="text" value="@Model.AssetTag" disabled />   
                        </div>
                    </div>
                    <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="MoveAsset.MovementType" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.MovementType" id="movementType" class="form-select selectpicker col-md-6"
                            data-live-search="true"
                            onchange="toggleLocationFields()">
                        <option selected disabled>Select Movement Type</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.MovementType)).Cast<EMMS.Models.Enumerators.MovementType>())
                        {
                            <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                    </select>
                    <span asp-validation-for="MoveAsset.MovementType" class="text-danger"></span>

                        </div>
                        <div class="col-md-6" id="facilityField">
                             <input asp-for="MoveAsset.FromId" value="@ViewBag._currentUser.FacilityId" class="form-control" type="int" hidden/>
                            <label asp-for="MoveAsset.FacilityId" class="form-label required-field"></label>
                            <select asp-for="MoveAsset.FacilityId" id="facility" class="form-select selectpicker col-md-6" data-live-search="true">
                            </select>
                        <span asp-validation-for="MoveAsset.FacilityId" class="text-danger"></span>
                        </div>
                        <div class="col-md-6 d-none" id="servicePointField">
                            <label asp-for="MoveAsset.ServicePointId" class="form-label required-field"></label>
                            <select asp-for="MoveAsset.ServicePointId" class="form-select selectpicker col-md-6"
                                    data-live-search="true" asp-items="@(new SelectList(Model.ServicePoints, "Id", "Name"))">
                                <option selected disabled>Select Service Point</option>
                            </select>
                    <span asp-validation-for="MoveAsset.FacilityId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                    <label asp-for="MoveAsset.Reason" class="form-label required-field"></label>
                            <select asp-for="MoveAsset.Reason" class="form-select selectpicker col-md-6"
                            data-live-search="true">
                        <option selected disabled>Select Movement Reason</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.MovementReason)).Cast<EMMS.Models.Enumerators.MovementReason>())
                        {
                            <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                            </select>
                    <span asp-validation-for="MoveAsset.Reason" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                    <label asp-for="MoveAsset.FunctionalStatus" class="form-label required-field"></label>
                            <select asp-for="MoveAsset.FunctionalStatus" class="form-select selectpicker col-md-6"
                            data-live-search="true">
                        <option selected disabled>Select Functional Status</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.FunctionalStatus)).Cast<EMMS.Models.Enumerators.FunctionalStatus>())
                        {
                                <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                            </select>
                    <span asp-validation-for="MoveAsset.FunctionalStatus" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="row mb-3" hidden>
                        <div class="col-md-6">
                            <div class="border rounded p-3">
                                <div class="form-check">
                                    <input asp-for="MoveAsset.IsApproved" class="form-check-input" type="checkbox" />
                                    <label asp-for="MoveAsset.IsApproved" class="form-check-label fw-bold"></label>
                                    <div class="form-text text-muted">
                                        Was this asset Approved for Transfer?
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit Movement</button>
                </form>
            </div>
        </div>

@section Scripts {
    <script>
        const selectedFacilityId = @Model.MoveAsset.FacilityId;

        function toggleLocationFields() {
            const movementType = document.getElementById("movementType").value;
            const facilityField = document.getElementById("facilityField");
            const servicePointField = document.getElementById("servicePointField");
            const servicePointSelect = servicePointField.querySelector("select"); // <-- Important

            if (movementType && facilityField && servicePointField) {
                if (movementType === "1") { // Facility
                    facilityField.classList.remove("d-none");
                    servicePointField.classList.add("d-none");
                     // Reset to default option
                     servicePointSelect.selectedIndex = 0;
                    servicePointSelect.value = "";
                    $(servicePointSelect).val("").selectpicker("refresh");
                } else if (movementType === "2") { // Service Point
                    facilityField.classList.remove("d-none");
                    servicePointField.classList.remove("d-none");
                } else if (movementType === "3") { // Facility
                    facilityField.classList.remove("d-none");
                    servicePointField.classList.add("d-none");
                    servicePointSelect.selectedIndex = 0;
                    servicePointSelect.value = "";
                    $(servicePointSelect).val("").selectpicker("refresh");
                }
                else {
                    // Default: hide both if needed
                    facilityField.classList.add("d-none");
                    servicePointField.classList.add("d-none");
                }
            }
        }

                function updateFacilityDropdown(isOffSite) {
            const facilitySelect = document.getElementById('facility');
            //console.log(facilitySelect);

            // Clear current options
            facilitySelect.innerHTML = '<option selected disabled>Select Facility</option>';

            fetch(`/AssetMovement/GetFacilites?isOffSite=${isOffSite}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(function (item) {
                        var option = document.createElement('option');
                        option.value = item.facilityId;
                        option.text = item.facilityName;
                        facilitySelect.appendChild(option);
                    });

                    // Set the selected value if it exists
                    if (selectedFacilityId && selectedFacilityId !== "0") {
                        facilitySelect.value = selectedFacilityId;
                    }
                    // Refresh the selectpicker UI if using Bootstrap Select
                    if ($(facilitySelect).hasClass('selectpicker')) {
                        $(facilitySelect).selectpicker('refresh');
                    }
                });
        }
                function onMovementTypeChange() {
            const movementType = document.getElementById("movementType").value;
            // Assuming: 3 = Site, 1 = Facility, 2 = ServicePoint (adjust as per your enum)
            if (movementType === "3") { // Site
                updateFacilityDropdown(true);
            } else {
                updateFacilityDropdown(false);
            }
            toggleLocationFields();
        }

        // Ensure correct state on page load
        document.addEventListener("DOMContentLoaded", function () {
                const movementTypeSelect = document.getElementById("movementType");
        if (movementTypeSelect) {
            movementTypeSelect.addEventListener("change", onMovementTypeChange);
            // Optionally, trigger on load if value is pre-selected
            onMovementTypeChange();
        }

        if(@Model.MoveAsset.FacilityId != null) {
            const facilitySelect = document.getElementById('facility');
            facilitySelect.value = @Model.MoveAsset.FacilityId;
        }
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
