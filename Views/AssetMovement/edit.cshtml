@using System.Text.Json
@model EMMS.ViewModels.MoveRequestViewModel;
@{
    ViewData["Title"] = Model.Asset!.AssetTagNumber;
    ViewData["moveAsset"] = "active";
    ViewData["JobMovement"] = "active";
}

<!-- Modal -->

<div class="card">
    <div class="card-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Move Asset</h1>
    </div>
    <div class="card-body">
        @if (TempData["MovementError"] != null)
        {
            <div class="row alert alert-danger d-flex align-items-center alert-dismissible fade show" role="alert">
                <div>
                    <div>
                        @TempData["MovementError"]
                    </div>
                </div>

                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>

        }
        <form asp-action="Edit" asp-controller="AssetMovement" method="post">
            <div class="row mb-3">
                <div class="col-md-6">
                    <input asp-for="MoveAsset.MovementId" hidden/>
                    <input asp-for="MoveAsset.DateCreated" type="hidden" id="asset-tag" class="form-control" readonly>
                    <input asp-for="MoveAsset.CreatedBy" type="hidden" id="asset-tag" class="form-control" readonly>
                    <input asp-for="MoveAsset.RowState" type="hidden" id="asset-tag" class="form-control" readonly>
                    <label asp-for="MoveAsset.MovementDate" class="form-label required-field"></label>
                    <input asp-for="MoveAsset.MovementDate" class="form-control" type="date" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <span asp-validation-for="MoveAsset.MovementDate" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="MoveAsset.AssetId" class="form-label required-field"></label>
                    <input asp-for="MoveAsset.AssetId" class="form-control" type="Guid" hidden/>
                    <input class="form-control" type="text" value="@($"{Model.Asset!.AssetTagNumber} - {Model.Asset.SubCategory?.Name}")" disabled />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="MoveAsset.MovementType" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.MovementType" id="movementType" class="form-select selectpicker col-md-6"
                            data-live-search="true"
                            onchange="toggleLocationFields()">
                        <option selected disabled>Select Movement Type</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.MovementType)).Cast<EMMS.Models.Enumerators.MovementType>())
                        {
                            <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                    </select>
                    <span asp-validation-for="MoveAsset.MovementType" class="text-danger"></span>

                </div>
                <div class="col-md-6" id="facilityField">
                    <input asp-for="MoveAsset.FromId" value="@ViewBag._currentUser.FacilityId" class="form-control" type="int" hidden />
                    <label asp-for="MoveAsset.FacilityId" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.FacilityId" id="facility" class="form-select selectpicker col-md-6" data-live-search="true">
                    </select>
                    <span asp-validation-for="MoveAsset.FacilityId" class="text-danger"></span>
                </div>
                <div class="col-md-6 d-none" id="servicePointField">
                    <label asp-for="MoveAsset.ServicePointId" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.ServicePointId" id="servicePoint" class="form-select selectpicker col-md-6"
                            data-live-search="true" asp-items="@(new SelectList(Model.ServicePoints, "Id", "Name"))">
                        <option selected disabled>Select Service Point</option>
                    </select>
                    <span asp-validation-for="MoveAsset.FacilityId" class="text-danger"></span>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label asp-for="MoveAsset.Reason" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.Reason" class="form-select selectpicker col-md-6"
                            data-live-search="true" onchange="onchangereason()" id="movementReason">
                        <option selected disabled>Select Movement Reason</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.MovementReason)).Cast<EMMS.Models.Enumerators.MovementReason>())
                        {
                            <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                    </select>
                    <span asp-validation-for="MoveAsset.Reason" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="MoveAsset.FunctionalStatus" class="form-label required-field"></label>
                    <select asp-for="MoveAsset.FunctionalStatus" class="form-select selectpicker col-md-6" id="MoveAsset_FunctionalStatus">
                        data-live-search="true">
                        <option selected disabled>Select Functional Status</option>
                        @foreach (var type in Enum.GetValues(typeof(EMMS.Models.Enumerators.FunctionalStatus)).Cast<EMMS.Models.Enumerators.FunctionalStatus>())
                        {
                            <option value="@(Convert.ToInt32(type))">@type.ToString()</option>
                        }
                    </select>
                    <span asp-validation-for="MoveAsset.FunctionalStatus" class="text-danger"></span>
                </div>
            </div>

            <div class="row mb-3 d-none" id="warrantyField">
                <div class="col-md-6">
                    <label asp-for="WarrantyEndDate" class="form-label required-field"></label>
                    <input asp-for="WarrantyEndDate" class="form-control" type="date" />
                </div>
            </div>
            <div class="row mb-3 d-none" id="otherReasonField">
                <div class="col-md-6">
                    <label asp-for="MoveAsset.OtherReason" class="form-label required-field"></label>
                    <input asp-for="MoveAsset.OtherReason" class="form-control" type="text" />
                </div>
            </div>
            <div class="row mb-3" hidden>
                <div class="col-md-6">
                    <div class="border rounded p-3">
                        <div class="form-check">
                            <input asp-for="MoveAsset.IsApproved" class="form-check-input" type="checkbox" />
                            <label asp-for="MoveAsset.IsApproved" class="form-check-label fw-bold"></label>
                            <div class="form-text text-muted">
                                Was this asset Approved for Transfer?
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Update Movement</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // ---- safely serialize server values into JS (outputs `null` or a value) ----
        const selectedFacilityId = @Html.Raw(JsonSerializer.Serialize(Model.MoveAsset?.FacilityId));
        const selectedServicePointId = @Html.Raw(JsonSerializer.Serialize(Model.MoveAsset?.ServicePointId));

        function onchangereason() {
            const movementReason = document.getElementById("movementReason")?.value;
            const warrantyField = document.getElementById("warrantyField");
            const otherReasonField = document.getElementById("otherReasonField");
            const functionalStatusSelect = document.getElementById("MoveAsset_FunctionalStatus");

            if (movementReason === "7") { // Warranty
                warrantyField?.classList.remove("d-none");
                otherReasonField?.classList.add("d-none");
                if (functionalStatusSelect) {
                    functionalStatusSelect.value = "1";
                    $(functionalStatusSelect).selectpicker?.("refresh");
                }
            } else if (movementReason === "8") { // Other
                otherReasonField?.classList.remove("d-none");
                warrantyField?.classList.add("d-none");
            } else {
                warrantyField?.classList.add("d-none");
                otherReasonField?.classList.add("d-none");
            }
        }

        function toggleLocationFields() {
            const movementType = document.getElementById("movementType")?.value;
            const facilityField = document.getElementById("facilityField");
            const servicePointField = document.getElementById("servicePointField");
            const servicePointSelect = document.querySelector('#servicePointField select');

            if (!movementType) {
                facilityField?.classList.add("d-none");
                servicePointField?.classList.add("d-none");
                return;
            }

            if (movementType === "1" || movementType === "3") { // Facility or Site
                facilityField?.classList.remove("d-none");
                servicePointField?.classList.add("d-none");

                if (servicePointSelect) {
                    servicePointSelect.selectedIndex = 0;
                    servicePointSelect.value = "";
                    if ($(servicePointSelect).hasClass('selectpicker')) $(servicePointSelect).selectpicker('refresh');
                }
            } else if (movementType === "2") { // Service Point
                facilityField?.classList.remove("d-none");
                servicePointField?.classList.remove("d-none");
            } else {
                facilityField?.classList.add("d-none");
                servicePointField?.classList.add("d-none");
            }
        }

        function updateFacilityDropdown(isOffSite) {
            const facilitySelect = document.getElementById('facility');
            if (!facilitySelect) return;

            facilitySelect.innerHTML = '<option selected disabled>Select Facility</option>';

            fetch(`/AssetMovement/GetFacilites?isOffSite=${isOffSite}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(function (item) {
                        const option = document.createElement('option');
                        option.value = item.facilityId;
                        option.text = item.facilityName;
                        facilitySelect.appendChild(option);
                    });

                    // set selected if one exists
                    if (selectedFacilityId !== null && selectedFacilityId !== undefined) {
                        facilitySelect.value = String(selectedFacilityId);
                    }

                    if ($(facilitySelect).hasClass('selectpicker')) {
                        $(facilitySelect).selectpicker('refresh');
                    }
                })
                .catch(err => console.error('Failed to load facilities', err));
        }

        function updateServicePointDropdown(facilityId) {
            const servicePointSelect = document.getElementById('servicePoint');
            if (!servicePointSelect) return;

            servicePointSelect.innerHTML = '<option selected disabled>Select Service Point</option>';

            fetch(`/AssetMovement/GetServicePoints?facilityId=${facilityId}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(function (item) {
                        const option = document.createElement('option');
                        option.value = item.id;
                        option.text = item.name;
                        servicePointSelect.appendChild(option);
                    });

                    // set selected if one exists
                    if (selectedServicePointId !== null && selectedServicePointId !== undefined) {
                        servicePointSelect.value = String(selectedServicePointId);
                    }

                    if ($(servicePointSelect).hasClass('selectpicker')) {
                        $(servicePointSelect).selectpicker('refresh');
                    }
                })
                .catch(err => console.error('Failed to load service points', err));
        }

        // Attach change handler to facility (safe guard element exists)
        document.addEventListener("DOMContentLoaded", function () {
            const movementTypeSelect = document.getElementById("movementType");
            if (movementTypeSelect) {
                movementTypeSelect.addEventListener("change", onMovementTypeChange);
                onMovementTypeChange();
            }

            const facilityElem = document.getElementById('facility');
            if (facilityElem) {
                facilityElem.addEventListener('change', function () {
                    const facilityId = this.value;
                    if (facilityId) updateServicePointDropdown(facilityId);
                });
            }

            // initial populate
            if (selectedFacilityId !== null && selectedFacilityId !== undefined) {
                // populate facility options then select the value
                updateFacilityDropdown(false);
                // also populate service points if needed
                if (selectedServicePointId !== null && selectedServicePointId !== undefined) {
                    updateServicePointDropdown(selectedFacilityId);
                }
            } else {
                // default load (no preselected facility)
                updateFacilityDropdown(false);
            }

            onchangereason();
        });

        // helper to map movement type behaviour
        function onMovementTypeChange() {
            const movementType = document.getElementById("movementType")?.value;
            if (movementType === "3") {
                updateFacilityDropdown(true);
            } else if (movementType === "2") {
                updateFacilityDropdown(false);
                // if there is a preselected facility, load its service points
                if (selectedFacilityId !== null && selectedFacilityId !== undefined) {
                    updateServicePointDropdown(selectedFacilityId);
                }
            } else {
                updateFacilityDropdown(false);
            }
            toggleLocationFields();
        }
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

